<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="PresentationFramework" #>
<#@ assembly name="WindowsBase" #>
<#@ assembly name="PresentationCore" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Windows" #>
<#+
  void SaveOutput(string fileName)
  {
      File.WriteAllText(fileName, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }

  void WriteAutoGenerated()
  {
	WriteLine("//------------------------------------------------------------------------------");
	WriteLine("// <auto-generated>");
	WriteLine("//     This code was generated by a tool");
	WriteLine("//");
	WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
	WriteLine("//     the code is regenerated.");
	WriteLine("// </auto-generated>");
	WriteLine("//------------------------------------------------------------------------------");
  }

	void GenerateEnumMembers(FontInfo info, byte offset, string resourcesDirectory)
	{
		var pairs = info.GetNamesFunc();
		foreach(var pair in pairs)
		{
			var bytes=BitConverter.GetBytes(pair.Item2);
			WriteLine("{0}{1}{2} = 0x{3:X},", info.Prefix, pair.Item1, info.Suffix, BitConverter.ToInt32(new byte[]{bytes[0], bytes[1], offset, 0}, 0));
        }
    }

	readonly Regex REG_PROP = new Regex(@"\([^)]*\)");

	string Safe(string text)
    {
        var textInfo = CultureInfo.CurrentCulture.TextInfo;

        if (text.EndsWith("-o") || text.Contains("-o-"))
            text = text.Replace("-o", "-outline");
                
        var stringBuilder = new StringBuilder(textInfo.ToTitleCase(text.Replace("-", " ")));

        stringBuilder
            .Replace("-", string.Empty).Replace("/", "_")
            .Replace(" ", string.Empty).Replace(".", string.Empty)
            .Replace("'", string.Empty);

        var matches = REG_PROP.Matches(stringBuilder.ToString());
        stringBuilder = new StringBuilder(REG_PROP.Replace(stringBuilder.ToString(), string.Empty));
        var hasMatch = false;

        for (var i = 0; i < matches.Count; i++)
        {
            var match = matches[i];
            if (match.Value.IndexOf("Hand", StringComparison.InvariantCultureIgnoreCase) > -1)
            {
                hasMatch = true;
                break;
            }
        }
                
        if (hasMatch)
        {
            stringBuilder.Insert(0, "Hand");
        }

        //if (char.IsDigit(stringBuilder[0]))
            //stringBuilder.Insert(0, '_');
                
        return stringBuilder.ToString();
    }

	struct FontInfo
    {
		public string FontFamilyName {get;set;}
		public string Prefix {get;set;}
		public string Suffix {get;set;}
		public FontWeight Weight {get;set;}
		public Func<IEnumerable<Tuple<string, int>>> GetNamesFunc {get;set;}
    }
#>