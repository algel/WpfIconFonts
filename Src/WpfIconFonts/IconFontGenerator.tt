<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="PresentationCore" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Windows" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="Algel.WpfIconFonts" #>
<#@ include file="Utils.ttinclude" #>
<#
	Directory.SetCurrentDirectory(Path.GetDirectoryName(Host.TemplateFile));
	var resourcesDirectory=Path.Combine(Directory.GetCurrentDirectory(), @"Resources");
	var fontDefinitions = new[]{
		new FontInfo
		{ 
			FontFamilyName = "Font Awesome 5 Brands", 
			Prefix = "Fa_Brand_", 
			Suffix = "", 
			Weight = FontWeights.Regular, 
			GetNamesFunc = ()=> XElement.Load(Path.Combine(resourcesDirectory, "fa-brands-400.svg"))
										.Descendants((XNamespace)"http://www.w3.org/2000/svg"+"glyph")
										.Select(e => new Tuple<string, int>(Safe(e.Attribute("glyph-name").Value), char.ConvertToUtf32(e.Attribute("unicode").Value, 0)))
		},
		new FontInfo
		{ 
			FontFamilyName = "Font Awesome 5 Free Solid",
			Prefix = "Fa_", 
			Suffix = "_Solid", 
			Weight = FontWeights.Black, 
			GetNamesFunc = ()=> XElement.Load(Path.Combine(resourcesDirectory, "fa-solid-900.svg"))
										.Descendants((XNamespace)"http://www.w3.org/2000/svg"+"glyph")
										.Select(e => new Tuple<string, int>(Safe(e.Attribute("glyph-name").Value), char.ConvertToUtf32(e.Attribute("unicode").Value, 0)))
		},
		new FontInfo
		{ 
			FontFamilyName = "Font Awesome 5 Free Regular",
			Prefix = "Fa_", 
			Suffix = "_Regular", 
			Weight = FontWeights.Regular, 
			GetNamesFunc = ()=> XElement.Load(Path.Combine(resourcesDirectory, "fa-regular-400.svg"))
										.Descendants((XNamespace)"http://www.w3.org/2000/svg"+"glyph")
										.Select(e => new Tuple<string, int>(Safe(e.Attribute("glyph-name").Value), char.ConvertToUtf32(e.Attribute("unicode").Value, 0)))
		},
		/*For TelerikWebUI font: */
		/*new FontInfo
		{ 
			FontFamilyName = "TelerikWebUI", 
			Prefix = "TelerikWebUi_", 
			Suffix = "", 
			Weight = FontWeights.Regular, 
			GetNamesFunc = ()=> XElement.Load(Path.Combine(resourcesDirectory, "FontResources.xaml"))
										.Elements((XNamespace)"clr-namespace:System;assembly=mscorlib" + "String")
										.Select(e => new Tuple<string, int>(e.Attribute((XNamespace)"http://schemas.microsoft.com/winfx/2006/xaml" + "Key").Value.Substring(5), char.ConvertToUtf32(e.Value, 0)))
		},*/
		/*Example of adding any system font character*/
		/*new FontInfo
		{
			FontFamilyName = "Tahoma",
			Prefix = "Tahoma_",
			Suffix ="",
			Weight = FontWeights.Regular, 
			IsSystem = true,
			GetNamesFunc=()=>new Tuple<string, int>[]{ new Tuple<string, int>("VerticalFourDots", 0x205E)}
		},*/
    };

	WriteAutoGenerated();
	WriteLine("namespace Algel.WpfIconFonts");
	WriteLine("{");
	PushIndent("\t");

	WriteLine("using System;");
	WriteLine("using System.Windows;");
	WriteLine("using System.Windows.Media;");

	WriteLine("");
	WriteLine("partial class Internals");
	WriteLine("{");
	PushIndent("\t");

	WriteLine("private static readonly Uri BaseUri = new Uri(\"pack://application:,,,/Algel.WpfIconFonts;component/Resources/\");");


	WriteLine("private static readonly Typeface[] Typefaces = {");
	PushIndent("\t");

	foreach(var info in fontDefinitions)
    {
		if(!info.IsSystem)
			WriteLine("new Typeface(new FontFamily(BaseUri, \"./#{0}\"), FontStyles.Normal, FontWeights.{1}, FontStretches.Normal),", info.FontFamilyName, info.Weight);
		else
			WriteLine("new Typeface(new FontFamily(\"{0}\"), FontStyles.Normal, FontWeights.{1}, FontStretches.Normal),", info.FontFamilyName, info.Weight);
    }

	PopIndent();
	WriteLine("};");

	PopIndent();
	WriteLine("}");

	PopIndent();
	WriteLine("}");

	SaveOutput(Path.Combine(Directory.GetCurrentDirectory(), "Internals.generated.cs"));

	WriteAutoGenerated();
	WriteLine("// ReSharper disable UnusedMember.Global");
	WriteLine("namespace Algel.WpfIconFonts");
	WriteLine("{");
	PushIndent("\t");

	WriteLine("using System.Diagnostics.CodeAnalysis;");
	WriteLine("");

	WriteLine("/// <summary>");
	WriteLine("/// Icon names");
	WriteLine("/// </summary>");
	WriteLine("[SuppressMessage(\"ReSharper\", \"InconsistentNaming\")]");
	WriteLine("public enum FontIcon");
	WriteLine("{");
	PushIndent("\t");

	WriteLine("///<summary>Set this value to show no icon.</summary>");
	WriteLine("None = 0x0,");

	WriteLine("///<summary>Set this value to show whitespace.</summary>");
	WriteLine("Whitespace = 0x20,");
	WriteLine("#pragma warning disable 1591");

	for(int i=0;i<fontDefinitions.Length; i++)
	{
		GenerateEnumMembers(fontDefinitions[i], (byte)i, resourcesDirectory);
    }
	WriteLine("#pragma warning restore 1591");

	PopIndent();
	WriteLine("}");
	PopIndent();
	WriteLine("}");

	SaveOutput(Path.Combine(Directory.GetCurrentDirectory(), "FontIcon.generated.cs"));
#>